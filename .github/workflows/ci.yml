name: CI

on:
  pull_request:
    branches: ["**"]
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  # ---------- PR checks: Linux only (fmt, clippy, tests) ----------
  pr_check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: rust:1-slim-bookworm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps for Wayland
        run: |
          apt-get update
          # pkg-config + wayland headers (and common extras many Wayland crates expect)
          apt-get install -y --no-install-recommends \
            pkg-config \
            libwayland-dev \
            wayland-protocols \
            libxkbcommon-dev
          rm -rf /var/lib/apt/lists/*

      - name: Set up Rust components
        run: rustup component add rustfmt clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Rustfmt (check)
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy -- -D warnings

      - name: Test
        run: cargo test --all-features --locked

  # ---------- Tagged release builds ----------
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            container: messense/rust-musl-cross:x86_64-musl
            target: x86_64-unknown-linux-musl
            artifact_suffix: linux-musl
            family: linux
          - os: windows-latest
            container: ""
            target: x86_64-pc-windows-msvc
            artifact_suffix: windows-msvc
            family: windows
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Wayland deps for musl build (Alpine-based container)
      - name: Install Wayland deps (musl)
        if: matrix.family == 'linux'
        run: |
          # messense/* images are Alpine-based
          apk add --no-cache \
            pkgconfig \
            wayland-dev \
            wayland-protocols \
            libxkbcommon-dev

      # Only needed on Windows job
      - name: Install Rust (Windows)
        if: matrix.family == 'windows'
        run: |
          rustup toolchain install stable --profile minimal
          rustup default stable
          rustup target add ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/* dist/ || true
          cd dist
          if [[ "${{ matrix.family }}" == "windows" ]]; then
            7z a ../${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}.zip ./*
          else
            tar czf ../${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}.tar.gz ./*
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}
          path: |
            ${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}.tar.gz
            ${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}.zip
          if-no-files-found: ignore

      - name: Publish GitHub release
        if: matrix.family == 'linux'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.event.repository.name }}-linux-musl.tar.gz
            ${{ github.event.repository.name }}-windows-msvc.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
