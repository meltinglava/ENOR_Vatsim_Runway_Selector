name: CI

on:
  pull_request:
    branches: ["**"]
  push:
    branches: ["main"]

# Cancel stale runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # -------- PR checks: Linux only --------
  pr_check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          rustup toolchain install stable --profile minimal
          rustup default stable
          rustup component add rustfmt clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Rustfmt (check)
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy -- -D warnings

      - name: Test
        run: cargo test --all-features --locked

  # -------- Release builds on push to main --------
  release_builds:
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_suffix: linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_suffix: windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          rustup toolchain install stable --profile minimal
          rustup default stable
          rustup target add ${{ matrix.target }}

      - name: Install deps (musl toolchain)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          # musl target uses musl-gcc as linker, provided by musl-tools

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }} --locked

      # Upload only the compiled binaries from the release dir.
      # If you build multiple binaries, theyâ€™ll all be included.
      - name: Upload artifact (Linux musl)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}
          path: |
            target/${{ matrix.target }}/release/vatsca_es_setup
          if-no-files-found: error

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.artifact_suffix }}
          path: |

            target/${{ matrix.target }}/release/vatsca_es_setup.exe
          if-no-files-found: error
